# Copyright Contributors to the Packit project.
# SPDX-License-Identifier: MIT

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: nginx
  annotations:
    # https://docs.openshift.com/container-platform/4.11/openshift_images/triggering-updates-on-imagestream-changes.html
    image.openshift.io/triggers: >-
      [{"from":{"kind":"ImageStreamTag","name":"nginx:{{ deployment }}"},"fieldPath":"spec.template.spec.containers[?(@.name==\"nginx\")].image"}]
spec:
  selector:
    matchLabels:
      component: nginx
  template:
    metadata:
      labels:
        component: nginx
{% if managed_platform %}
        paas.redhat.com/appcode: {{ appcode }}
{% endif %}
    spec:
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: packit-secrets
        secret:
          secretName: packit-secrets
      - name: flower-secret
        secret:
          secretName: flower-htpasswd
      containers:
      - name: nginx
        image: nginx:{{ deployment }}
        ports:
        - containerPort: 8443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx
          readOnly: true
        - name: packit-secrets
          mountPath: /secrets
          readOnly: true
        - name: flower-secret
          mountPath: /etc/nginx/secrets
          readOnly: true
        resources:
          requests:
            memory: "8Mi"
            cpu: "5m"
          limits:
            memory: "32Mi"
            cpu: "10m"
  replicas: 1
  strategy:
    type: Recreate
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
data:
  nginx.conf: |-
    pid /tmp/nginx.pid;
    events {}
    http {
        server {
             listen 8443 ssl;
             ssl_certificate     /secrets/fullchain.pem;
             ssl_certificate_key /secrets/privkey.pem;

             # Serve only the /metrics endpoint (exact match) externally, and
             # make sure it's served only using the GET method.
             # Return 404 for all other paths.
             location = /metrics {
                proxy_pass       http://pushgateway;
                proxy_method     GET;
             }

             location = /flower-metrics {
               proxy_pass http://flower:5555/metrics;
               proxy_method     GET;
             }

             # https://flower.readthedocs.io/en/1.0/reverse-proxy.html
             location / {
               proxy_pass http://flower:5555;
               proxy_set_header Host $host;
               proxy_set_header X-Real-IP $remote_addr;

               proxy_http_version 1.1;
               proxy_set_header Upgrade $http_upgrade;
               proxy_set_header Connection "upgrade";

               auth_basic  "Restricted";
               auth_basic_user_file  "/etc/nginx/secrets/htpasswd";
             }

         }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
{% if managed_platform %}
  labels:
    paas.redhat.com/appcode: {{ appcode }}
{% endif %}
spec:
  ports:
    - name: nginx-https
      port: 443
      protocol: TCP
      targetPort: 8443
  selector:
    component: nginx
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: nginx
{% if managed_platform %}
  labels:
    paas.redhat.com/appcode: {{ appcode }}
    # used by internal Grafana
    shard: external
{% endif %}
spec:
  host: "{{ 'workers.stg.packit.dev' if deployment == 'stg' else 'workers.packit.dev' if deployment == 'prod'}}"
  port:
    targetPort: nginx-https
  to:
    kind: Service
    name: nginx
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: passthrough
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: nginx
spec:
  tags:
    - name: {{ deployment }}
      from:
        kind: DockerImage
        name: ghcr.io/nginxinc/nginx-unprivileged
      importPolicy:
        # Periodically query registry to synchronize tag and image metadata.
        scheduled: {{ auto_import_images }}
  lookupPolicy:
    # allows all resources pointing to this image stream to use it in the image field
    local: true
